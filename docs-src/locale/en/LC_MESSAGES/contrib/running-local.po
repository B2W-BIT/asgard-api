# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, B2W Digital
# This file is distributed under the same license as the Asgard API package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asgard API \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-11 13:34-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../contrib/running-local.rst:5
msgid "Rodando o projeto localmente"
msgstr ""

#: ../../contrib/running-local.rst:7
msgid "Essa é lista de ENVs já com os valores para o ambiente de desenvolvimento:"
msgstr ""

#: ../../contrib/running-local.rst:35
msgid ""
"Você precisa passar todas as envs para ser possível rodar o código da "
"API. O jeito mais simples de fazer isso é criar um arquivo chamado "
"``.env`` na raiz do projeto, contento todas as envs mostradas acima, "
"exatamente com esses valores. Esse arquivo já está no ``.gitignore``, por"
" isso não será comitado."
msgstr ""

#: ../../contrib/running-local.rst:39
msgid ""
"Todas as ENVs com prefrixo ``HOLLOWMAN_`` são usadas pelo :ref:`código "
"legado <hollowman.api>`. As ENVs novas possuem o prefixo ``ASGARD_``. Aos"
" poucos vamos migrando o cógido e as envs."
msgstr ""

#: ../../contrib/running-local.rst:42
msgid "Rodando a Asgard API localmente"
msgstr ""

#: ../../contrib/running-local.rst:44
msgid ""
"O projeto Asgard API usa o `pipenv "
"<https://pipenv.readthedocs.io/en/latest/>`_ e precisa do python 3.6.x. "
"Antes de instalar as dependências, certifique-se que o python 3.6 esteja "
"instalado e funcionando."
msgstr ""

#: ../../contrib/running-local.rst:47
msgid ""
"Recomendamos o uso do `pyenv <https://github.com/pyenv/pyenv#table-of-"
"contents>`_ para gerenciar a versões locais do python."
msgstr ""

#: ../../contrib/running-local.rst:49
msgid "Para instalar as dependências rode:"
msgstr ""

#: ../../contrib/running-local.rst:59
msgid "Ligando todos os containers necesários para rodar o projeto completo"
msgstr ""

#: ../../contrib/running-local.rst:61
msgid ""
"Depois disso você precisa subir um ambiente de desenvolvimento local, "
"contento todas as dependencias que a Asgard API precisa para funcionar. "
"Isso inclui: Mesos, Elasticsearch, Marathon, Zookeeper, PgSQL, etc."
msgstr ""

#: ../../contrib/running-local.rst:63
msgid "Para subir todos esses containers, rode:"
msgstr ""

#: ../../contrib/running-local.rst:69
msgid ""
"Isso vai baixar todas as imagens docker e rodar todos os conatainers "
"necessários."
msgstr ""

#: ../../contrib/running-local.rst:72
msgid ""
"A primeira rodada do asgard-run.sh vai produzir bastante output, pois os "
"outputs do docker pull também serão exibidos."
msgstr ""

#: ../../contrib/running-local.rst:76
msgid "Desligando todo o ambiente"
msgstr ""

#: ../../contrib/running-local.rst:78
msgid ""
"Para desligar todos os containers, basta rodar novamente o script "
"``asgard-run.sh`` e pressionar ``^C`` assim que essa mensagem aparecer:"
msgstr ""

#: ../../contrib/running-local.rst:87
msgid ""
"Esse \"sleep\" que o script faz é justamente para dar tempo de "
"interrompermos o rodada antes dele começar a ligar todos os containers."
msgstr ""

#: ../../contrib/running-local.rst:90
msgid "Rodando a API"
msgstr ""

#: ../../contrib/running-local.rst:92
msgid "Para rodar a API, use:"
msgstr ""

#: ../../contrib/running-local.rst:98
msgid ""
"Esse script abre a porta ``5000`` e redireciona os requests para a API "
"correta. Para entender o porque desse script precisamos entender a :ref"
":`re-escrita de código <hollowman.api>` que estamos fazendo na Asgard "
"API."
msgstr ""

#: ../../contrib/running-local.rst:101
msgid "Quando tiver a API rodando, você pode fazer um request para validar:"
msgstr ""

#: ../../contrib/running-local.rst:110
msgid ""
"Isso significa que você não está autenticado, o que é verdade, já que nem"
" criamos seu novo usuário. Faremos isso agora."
msgstr ""

#: ../../contrib/running-local.rst:113
msgid "Criando um novo usuário para desenvolvimento"
msgstr ""

#: ../../contrib/running-local.rst:115
msgid ""
"Para criar um novo usuário, você pode editar o arquivo "
"``scripts/sql/user.sql`` a adicionar ali um trecho de SQL que vincula seu"
" user a uma das contas de dev que existem no banco. Usando um exemplo: "
"Novo usuário tem email ``mail@server.com``, faríamos o seguinte:"
msgstr ""

#: ../../contrib/running-local.rst:134
msgid ""
"Agora rode novamente o :ref:`script que sobe o ambiente de "
"desenvolvimento <asgard-run.sh>`. Isso vai recriar todos os componentes, "
"incluindo o baco de dados."
msgstr ""

#: ../../contrib/running-local.rst:136
msgid "Dessa forma, agora podemos fazer a seguinte requisição:"
msgstr ""

#: ../../contrib/running-local.rst:145
msgid ""
"Agora sim você está vendo sua lista de apps, que obviamente é vazia. "
"Nesse momento você está pronto para começar a desenvolver novos códigos "
"para a Asgard API."
msgstr ""

#: ../../contrib/running-local.rst:150
msgid "Logando na UI"
msgstr ""

#: ../../contrib/running-local.rst:152
msgid ""
"Depois de rodar um ambiente completo com o script ``asgard-run.sh`` você "
"poderá acessar a Asgard UI no endereço `<http://localhost:4200>`_. O "
"único login suportado atualmente pela UI é oauth2, especificamente com "
"Google sendo o provider."
msgstr ""

#: ../../contrib/running-local.rst:156
msgid ""
"**Atenção**: Para o processo de login funcionar você precisa criar uma "
"Oauth2 app no console do Google. Mais detalhes aqui: "
"https://developers.google.com/identity/protocols/OAuth2 Depois de criar "
"essa app, preencha as ENVs: ``HOLLOWMAN_GOOGLE_OAUTH2_CLIENT_ID`` e "
"``HOLLOWMAN_GOOGLE_OAUTH2_CLIENT_SECRET`` com os valores que o Google "
"gerou pra você."
msgstr ""

#: ../../contrib/running-local.rst:161
msgid "Evoluindo o banco de dados"
msgstr ""

#: ../../contrib/running-local.rst:163
#, python-format
msgid ""
"Sempre que fizermos uma mudança no banco, vamos guardar o SQL na pasta "
"``sql/`` . Os arquivos têm nome prefixado por um número (``date "
"+\"%s\"``), pois isso indica a ordem em que devem ser rodados. Por "
"enquanto vamos assim até migrar para um projeto que gerencie essas "
"migrações."
msgstr ""

#: ../../contrib/running-local.rst:166
msgid ""
"Para pegar o SQL que o Alchemy gera para um model: Abra o ipython (também"
" passando as mesmas envs que você passou para rodar a API)"
msgstr ""

#: ../../contrib/running-local.rst:178
msgid "Rodando os testes do projeto"
msgstr ""

#: ../../contrib/running-local.rst:180
msgid ""
"Os testes estão divididos em dois: Unitários (``tests/``) e de Integração"
" (``itests/``). [1]_"
msgstr ""

#: ../../contrib/running-local.rst:183
msgid "Rodando os testes unitários"
msgstr ""

#: ../../contrib/running-local.rst:190
msgid "Rodando os testes de integração"
msgstr ""

#: ../../contrib/running-local.rst:192
msgid ""
"Para rodar os testes de integração você precisa de alguns serviços "
"rodando. Para ligar esses serviços localmente rode, na raiz do projeto:"
msgstr ""

#: ../../contrib/running-local.rst:202
msgid "depois rode os testes:"
msgstr ""

#: ../../contrib/running-local.rst:209
msgid "Notas"
msgstr ""

#: ../../contrib/running-local.rst:210
msgid "Mais sobre os testes do projeto: :ref:`writing-tests`"
msgstr ""

#~ msgid ""
#~ "``` $ curl -i http://127.0.0.1:5000/v2/apps/"
#~ " {\"msg\": \"Authorization token is "
#~ "invalid\"}% ```"
#~ msgstr ""

#~ msgid "## Criando um novo usuário para desenvolvimento"
#~ msgstr ""

#~ msgid "```"
#~ msgstr ""

#~ msgid ""
#~ "INSERT INTO \"user\" (tx_name, tx_email, "
#~ "tx_authkey, bl_system) VALUES ('Novo User',"
#~ " 'mail@server.com', 'a648638d589740879f25bf55648ccc21', "
#~ "false);"
#~ msgstr ""

#~ msgid "INSERT INTO user_has_account (account_id, user_id) VALUES ("
#~ msgstr ""

#~ msgid ""
#~ "(SELECT id from account where name "
#~ "= 'Asgard/DEV'), (SELECT id from "
#~ "\"user\" where tx_email='mail@server.com')"
#~ msgstr ""

#~ msgid ");"
#~ msgstr ""

#~ msgid ""
#~ "(SELECT id from account where name "
#~ "= 'Asgard/INFRA'), (SELECT id from "
#~ "\"user\" where tx_email='mail@server.com')"
#~ msgstr ""

#~ msgid ""
#~ "``` curl -H \"Authorization: Token "
#~ "a648638d589740879f25bf55648ccc21\" http://127.0.0.1:5000/v2/apps"
#~ " {\"apps\": []}% ```"
#~ msgstr ""

#~ msgid ""
#~ "O projeto Asgard API usa o `pipenv"
#~ " <https://pipenv.readthedocs.io/en/latest/>` e precisa"
#~ " do python 3.6.x. Antes de instalar"
#~ " as dependências, certifique que o "
#~ "python 3.6 esteja instalado e "
#~ "funcionando."
#~ msgstr ""

#~ msgid ""
#~ "Esse script abre a porta ``5000`` "
#~ "e redireciona os requests para a "
#~ "API correta. Para entender o porque "
#~ "desse script precisamos entender a "
#~ "re-escrita de códugo que estamos "
#~ "fazendo na Asgard API."
#~ msgstr ""

#~ msgid "## Rodando um ambiente Asgard completo"
#~ msgstr ""

#~ msgid ""
#~ "Para rodar um ambiente completo, use "
#~ "o script `asgard-run.sh`. Esse script"
#~ " vai ligar um container para cada "
#~ "componente do Asgard. Depois que tiver"
#~ " com todos os containers rodando mais"
#~ " a API (que rodamos com o "
#~ "comando acima), basta acessar "
#~ "`http://localhost:4200` e fazer login usando"
#~ " o usuário que acabamos e criar."
#~ msgstr ""

#~ msgid ""
#~ "Depois de rodar um ambiente completo "
#~ "com o script ``asgard-run.sh`` você "
#~ "poderá acessar a Asgard UI no "
#~ "endereço `<localhost:4200>`_. Esse script vai"
#~ " ligar um container para cada "
#~ "componente do Asgard. Depois que tiver"
#~ " com todos os containers rodando mais"
#~ " a API (que rodamos com o "
#~ "comando acima), basta acessar "
#~ "`http://localhost:4200` e fazer login usando"
#~ " o usuário que acabamos e criar."
#~ msgstr ""

#~ msgid ""
#~ "Depois de rodar um ambiente completo "
#~ "com o script ``asgard-run.sh`` você "
#~ "poderá acessar a Asgard UI no "
#~ "endereço `<http://localhost:4200>`_. Esse script "
#~ "vai ligar um container para cada "
#~ "componente do Asgard. Depois que tiver"
#~ " com todos os containers rodando mais"
#~ " a API (que rodamos com o "
#~ "comando acima), basta acessar "
#~ "`http://localhost:4200` e fazer login usando"
#~ " o usuário que acabamos e criar."
#~ msgstr ""

#~ msgid ""
#~ "**Atenção**: Para o processo de login"
#~ " funcionar você precisa criar uma "
#~ "Oauth2 app no console do Google. "
#~ "Mais detalhes aqui: "
#~ "https://developers.google.com/identity/protocols/OAuth2"
#~ msgstr ""

#~ msgid "## Evoluindo o banco de dados"
#~ msgstr ""

#~ msgid ""
#~ "Sempre que fizermos uma mudança no "
#~ "banco, vamos guardar o SQL na "
#~ "pasta `sql/` . Os arquivos têm "
#~ "nome prefixado por um número (`date "
#~ "+\"%s\"`), pois isso indica a ordem "
#~ "em que deve ser rodados. Por "
#~ "enquanto vamos assim até migrar para "
#~ "um projeto que gerencie essas migrações."
#~ msgstr ""

#~ msgid ""
#~ "```python >>> from sqlalchemy.schema import"
#~ " CreateTable >>> from hollowman.models "
#~ "import <Model> >>> from hollowman.models "
#~ "import engine >>> print "
#~ "(CreateTable(Account.__table__).compile(engine)) ```"
#~ msgstr ""

#~ msgid ""
#~ "## Env vars necessárias para o "
#~ "projeto * ASGARD_CACHE_URL [required]: "
#~ "Enredeço do cache (Redis). No formato:"
#~ " `redis://<host>:<port>/<db>` * MARATHON_CREDENTIALS"
#~ " [required] user:pass for the basic "
#~ "auth * HOLLOWMAN_MARATHON_ADDRESS_INDEX [required]"
#~ " Where to connect to find Marathon"
#~ " api. List of Marathon IPs. <INDEX>"
#~ " starts at 0. * "
#~ "HOLLOWMAN_MESOS_ADDRESS_INDEX [required] Where to"
#~ " connect to find Mesos API. List "
#~ "of Mesos IPs. <INDEX> starts at 0."
#~ " * ASGARD_CACHE_KEY_PREFIX: default `asgard-"
#~ "api/` Prefixo que será usado em "
#~ "todas as operações com o cache *"
#~ " ASGARD_CACHE_DEFAULT_TIMEOUT default 60s; Tempo"
#~ " de expiração padrão das chaves de"
#~ " cache * HOLLOWMAN_REDIRECT_ROOTPATH_TO: Env "
#~ "que diz para onde o usuario será"
#~ " redirecionado se acessar a raiz onde"
#~ " o hollowman está deployado. Defaults "
#~ "to `/v2/apps` * HOLLOWMAN_GOOGLE_OAUTH2_CLIENT_ID:"
#~ " ID da app Oauth2, registrado no "
#~ "console do Google * "
#~ "HOLLOWMAN_GOOGLE_OAUTH2_CLIENT_SECRET: Secret dessa "
#~ "app. * HOLLOWMAN_SECRET_KEY: Secret usado "
#~ "pelo Flask * HOLLOWMAN_REDIRECT_AFTER_LOGIN: "
#~ "URL pra onde o usuário será "
#~ "redirecionado após o fluxo do oauth2."
#~ " O redirect é feito pra: "
#~ "`URL?jwt=<token_jwt>` * HOLLOWMAN_DB_ECHO: Define"
#~ " se os logs do SQLAlchemy estão "
#~ "ligados: Valores possíveis: 1|0. Default "
#~ "0 * HOLLOWMAN_DB_URL: URL completa (com"
#~ " user, pwd, host, schema) do banco"
#~ " de dados: Formato: "
#~ "`postgresql://<user>:<pwd>@<host>/<schema>` * "
#~ "ASGARD_DB_URL: É o mesmo valor da "
#~ "env `HOLLOWMAN_DB_URL` mas é usado pelo"
#~ " código novo, assíncrono. * "
#~ "ASGARD_LOGLEVEL: String indicando o loglevel"
#~ " a ser usado. Pode ser INFO, "
#~ "ERROR, DEBUG, WARNING, etc."
#~ msgstr ""

#~ msgid "# Rodando os testes do projeto"
#~ msgstr ""

#~ msgid ""
#~ "Os testes estão divididos em dois: "
#~ "Unitários (`teste/`) e de Integração "
#~ "(`itests/`)."
#~ msgstr ""

#~ msgid "Mais sobre os testes do projeto :ref:`writing-tests`"
#~ msgstr ""

#~ msgid ""
#~ "ASGARD_CACHE_URL [required]: Enredeço do cache"
#~ " (Redis). No formato: "
#~ "`redis://<host>:<port>/<db>`"
#~ msgstr ""

#~ msgid ""
#~ "Para rodar um ambiente de "
#~ "desenvolvimento local, podemos usar o "
#~ "script [asgard-run.sh](asgard-run.sh) que "
#~ "está na raiz do projeto. Esse "
#~ "script vai subir um cluster de "
#~ "Mesos + Marathon automaticamente. O "
#~ "output do script te diz quais os"
#~ " IPs de cada um dos componentes."
#~ msgstr ""

#~ msgid ""
#~ "Depois de ter o cluster rodando é"
#~ " hora de configurar as env vars "
#~ "para o seu projeto local. A lista"
#~ " de envs necessárias está no final"
#~ " desse documento."
#~ msgstr ""

#~ msgid "Env vars necessárias para o projeto"
#~ msgstr ""

#~ msgid ""
#~ "``ASGARD_CACHE_URL`` [required]: Enredeço do "
#~ "cache (Redis). No formato: "
#~ "`redis://<host>:<port>/<db>`"
#~ msgstr ""

#~ msgid "MARATHON_CREDENTIALS [required] user:pass for the basic auth"
#~ msgstr ""

#~ msgid ""
#~ "HOLLOWMAN_MARATHON_ADDRESS_INDEX [required] Where to"
#~ " connect to find Marathon api. List"
#~ " of Marathon IPs. <INDEX> starts at"
#~ " 0."
#~ msgstr ""

#~ msgid ""
#~ "HOLLOWMAN_MESOS_ADDRESS_INDEX [required] Where to"
#~ " connect to find Mesos API. List "
#~ "of Mesos IPs. <INDEX> starts at 0."
#~ msgstr ""

#~ msgid ""
#~ "ASGARD_CACHE_KEY_PREFIX: default `asgard-api/` "
#~ "Prefixo que será usado em todas as"
#~ " operações com o cache"
#~ msgstr ""

#~ msgid ""
#~ "ASGARD_CACHE_DEFAULT_TIMEOUT default 60s; Tempo "
#~ "de expiração padrão das chaves de "
#~ "cache"
#~ msgstr ""

#~ msgid ""
#~ "HOLLOWMAN_REDIRECT_ROOTPATH_TO: Env que diz "
#~ "para onde o usuario será redirecionado"
#~ " se acessar a raiz onde o "
#~ "hollowman está deployado. Defaults to "
#~ "`/v2/apps`"
#~ msgstr ""

#~ msgid ""
#~ "HOLLOWMAN_GOOGLE_OAUTH2_CLIENT_ID: ID da app "
#~ "Oauth2, registrado no console do Google"
#~ msgstr ""

#~ msgid "HOLLOWMAN_GOOGLE_OAUTH2_CLIENT_SECRET: Secret dessa app."
#~ msgstr ""

#~ msgid "HOLLOWMAN_SECRET_KEY: Secret usado pelo Flask"
#~ msgstr ""

#~ msgid ""
#~ "HOLLOWMAN_REDIRECT_AFTER_LOGIN: URL pra onde o"
#~ " usuário será redirecionado após o "
#~ "fluxo do oauth2. O redirect é "
#~ "feito pra: `URL?jwt=<token_jwt>`"
#~ msgstr ""

#~ msgid ""
#~ "HOLLOWMAN_DB_ECHO: Define se os logs do"
#~ " SQLAlchemy estão ligados: Valores "
#~ "possíveis: 1|0. Default 0"
#~ msgstr ""

#~ msgid ""
#~ "HOLLOWMAN_DB_URL: URL completa (com user, "
#~ "pwd, host, schema) do banco de "
#~ "dados: Formato: "
#~ "`postgresql://<user>:<pwd>@<host>/<schema>`"
#~ msgstr ""

#~ msgid ""
#~ "ASGARD_DB_URL: É o mesmo valor da "
#~ "env `HOLLOWMAN_DB_URL` mas é usado pelo"
#~ " código novo, assíncrono."
#~ msgstr ""

#~ msgid ""
#~ "ASGARD_LOGLEVEL: String indicando o loglevel"
#~ " a ser usado. Pode ser INFO, "
#~ "ERROR, DEBUG, WARNING, etc."
#~ msgstr ""

#~ msgid "## Rodando os testes unitários `PIPENV_DONT_LOAD_ENV=1 pipenv run test`"
#~ msgstr ""

#~ msgid "## Rodando os testes de integração"
#~ msgstr ""

#~ msgid "``` source dev/vars.sh source dev/network.sh source dev/pgsql.sh ```"
#~ msgstr ""

#~ msgid "`PIPENV_DONT_LOAD_ENV=1 PYTHONPATH=. pipenv run itest`"
#~ msgstr ""

#~ msgid ""
#~ "Essa é lista de env já com "
#~ "os valores para o ambiente de "
#~ "desenvolvimento:"
#~ msgstr ""

#~ msgid ""
#~ "Todas as ENVs com prefrixo "
#~ "``HOLLOWMAN_`` são usadas pelo :ref:`código"
#~ " legado <hollowman.api>`. As ENVs novas "
#~ "possuem o prefiro ``ASGARD_``. Aos "
#~ "poucos vamos migrando o cógido e "
#~ "as envs."
#~ msgstr ""

#~ msgid ""
#~ "O projeto Asgard API usa o `pipenv"
#~ " <https://pipenv.readthedocs.io/en/latest/>`_ e precisa"
#~ " do python 3.6.x. Antes de instalar"
#~ " as dependências, certifique que o "
#~ "python 3.6 esteja instalado e "
#~ "funcionando."
#~ msgstr ""

#~ msgid ""
#~ "Para criar um novo usuário, você "
#~ "pode editar o arquivo "
#~ "[user.sql](scripts/sql/user.sql) a adicionar ali "
#~ "um trecho de SQL que vincula seu"
#~ " user a uma das contas de dev"
#~ " que existem no banco. Usando um "
#~ "exemplo: Novo usuário tem email "
#~ "\"mail@server.com\", faríamos o seguinte:"
#~ msgstr ""

#~ msgid ""
#~ "Para criar um novo usuário, você "
#~ "pode editar o arquivo ``scripts/sql/user.sql``"
#~ " a adicionar ali um trecho de "
#~ "SQL que vincula seu user a uma "
#~ "das contas de dev que existem no"
#~ " banco. Usando um exemplo: Novo "
#~ "usuário tem email \"mail@server.com\", "
#~ "faríamos o seguinte:"
#~ msgstr ""

#~ msgid ""
#~ "Agora rode novamente o script que "
#~ "sobe o ambiente de desenvolvimento. Isso"
#~ " vai recriar todos os componentes, "
#~ "incluindo o baco de dados."
#~ msgstr ""

#~ msgid ""
#~ "Sempre que fizermos uma mudança no "
#~ "banco, vamos guardar o SQL na "
#~ "pasta `sql/` . Os arquivos têm "
#~ "nome prefixado por um número (``date "
#~ "+\"%s\"``), pois isso indica a ordem "
#~ "em que devem ser rodados. Por "
#~ "enquanto vamos assim até migrar para "
#~ "um projeto que gerencie essas migrações."
#~ msgstr ""

#~ msgid ""
#~ "Para rodar os testes de integração "
#~ "você precisa de alguns serviços rodando,"
#~ " por enquanto apenas o postgres. Para"
#~ " ligar um postgres localmente rode, "
#~ "na raiz do projeto:"
#~ msgstr ""

