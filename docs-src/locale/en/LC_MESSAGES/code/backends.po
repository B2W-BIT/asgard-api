# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, B2W Digital
# This file is distributed under the same license as the Asgard API package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asgard API \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-22 13:57-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../code/backends.rst:4
msgid "Backends"
msgstr ""

#: ../../code/backends.rst:7
msgid ""
"Os Backends são a cola entre o core do asgard e as outras APIs com as "
"quais a Asgard API consegue se comunicar."
msgstr ""

#: ../../code/backends.rst:9
msgid ""
"Na mesma linha dos :ref:`Services <asgard.services>`, esses objetos devem"
" mapear todas as ações que um determinado backend deve ser capaz de "
"realizar. A comunicação entre o backend e suas respectivas APIs lowlevel "
"deve ser feita atráves de um o mais :ref:`Clients <asgard.clients>`."
msgstr ""

#: ../../code/backends.rst:11
msgid "O backend estão atualmente divididos em:"
msgstr ""

#: ../../code/backends.rst:13
msgid ":py:class:`AgentsBackend <asgard.backends.base.AgentsBackend>`"
msgstr ""

#: ../../code/backends.rst:14
msgid ":py:class:`AppsBackends <asgard.backends.base.AppsBackend>`"
msgstr ""

#: ../../code/backends.rst:15
msgid ""
":py:class:`ScheduledJobsBackend "
"<asgard.backends.jobs.ScheduledJobsBackend>`"
msgstr ""

#: ../../code/backends.rst:18
msgid ""
"Esss são objetos abstratos que definem quais ações cada um desses "
"backends podem executar. As implementações desses backends é que vão "
"adicionar suporte ao projeto Asgard a falar com múltiplos outros "
"projetos/APIs."
msgstr ""

#: ../../code/backends.rst:20
msgid ""
"A junção de múltiplos ``Backends`` forma um \"Orquestrador\", modelado no"
" objeto :py:class:`Orchestrator <asgard.backends.base.Orchestrator>`. "
"Esse é o objeto principal em termos de funcionalidades da Asgard API, é "
"esse objeto quem define o que a Asgard API consegue fazer, em termos de "
"orquestração de containers."
msgstr ""

#: ../../code/backends.rst:26
msgid "Orquestrador"
msgstr ""

#: ../../code/backends.rst:28
msgid ""
"O Objeto :py:class:`Orchestrator <asgard.backends.base.Orchestrator>` é a"
" junção de múltiplos backends. Uma instância de Orquestator recebe seus "
"backends como parâmetros em seu construtor."
msgstr ""

#: ../../code/backends.rst:31
msgid "Abaixo está a implementação do objeto ``Orchestrator``:"
msgstr ""

#: asgard.backends.base.Orchestrator:1 of
msgid ""
"Classe abstrata que mapeia todas as ações que um orquestrador pode "
"excutar. As depdenências injetadas aqui são implementações que "
"efetivamente falam com cada um dos backends suportados."
msgstr ""

#: asgard.backends.base.Orchestrator.get_apps_running_for_agent:1 of
msgid ""
"Método que retorna todas as apps que estão atualmente rodando no agent "
"referido."
msgstr ""

#: ../../code/backends.rst:39
msgid "Orquetsradores atualmente suportados"
msgstr ""

#: ../../code/backends.rst:42
msgid "Mesos"
msgstr ""

#: ../../code/backends.rst:44
msgid ""
"O Mesos é um cluster manager que suporta uma variadeade de orquestrdores "
"de containers. Como temos modelado o backend de Agents separados do "
"Backend de Apps podemos ter múltiplas implementações do Orchestrator "
"Mesos com backends variados."
msgstr ""

#: ../../code/backends.rst:46
msgid ""
"Atualmente a Asgard API já possui implementação de "
":py:class:`AgentsService <asgard.services.agents.AgentsService>` para "
"`Apache Mesos <https://mesos.apache.org/>`_ e faremos uma implementação "
"de AppsService (interface ainda a ser definida) para Mesosphere Marathon."
msgstr ""

#: ../../code/backends.rst:49
msgid "Kubernetes - Futuro"
msgstr ""

#: ../../code/backends.rst:51
msgid ""
"Assim que as interfaces ``AgentsService`` e ``AppsServices`` estiverem "
"mais bem defindas poderemos começar uma implementação para suportar "
"orquestração de containers com `Kubernetes <https://kubernetes.io/>`_."
msgstr ""

#~ msgid ""
#~ "Na mesma linha dos :ref:`Services "
#~ "<asgard.services>`, esses objetos devem mapear"
#~ " todas as ações que um determinado"
#~ " backend deve ser capaz de realizer."
#~ msgstr ""

#~ msgid ""
#~ "O backend são dividiso em "
#~ "``AgentsBackend`` e ``AppsBackends``. Esss são"
#~ " objetos abstratos que definem quais "
#~ "ações cada um desses backends podem "
#~ "executar."
#~ msgstr ""

#~ msgid ""
#~ "O backend são dividiso em "
#~ ":py:class:`AgentsBackend <asgard.backends.base.AgentsBackend>`"
#~ " e ``AppsBackends``. Esss são objetos "
#~ "abstratos que definem quais ações cada"
#~ " um desses backends podem executar."
#~ msgstr ""

#~ msgid ""
#~ "Classe abstrata que mapeia todas as "
#~ "ações que um orquestrador pode excutar."
#~ " As depdenências injetadas aqui são "
#~ "implementações que efetivamente falam com "
#~ "cada um dos backends suportados."
#~ msgstr ""

#~ msgid ""
#~ "Método que retorna todas as apps "
#~ "que estão atualmente rodando no agent"
#~ " referido."
#~ msgstr ""

#~ msgid ""
#~ "Os Backends são a implementaçao concreta"
#~ " com as outras APIs com as "
#~ "quais a Asgard API consegue se "
#~ "comunicar."
#~ msgstr ""

#~ msgid ""
#~ "O backend são dividiso em "
#~ ":py:class:`AgentsBackend <asgard.backends.base.AgentsBackend>`"
#~ " e :py:class:`AppsBackends "
#~ "<asgard.backends.base.AppsBackend>`. Esss são "
#~ "objetos abstratos que definem quais "
#~ "ações cada um desses backends podem "
#~ "executar."
#~ msgstr ""

#~ msgid ""
#~ "A junção de múltiplos ``Backends`` forma"
#~ " um \"Orquestrador\", modelado no objeto"
#~ " ``Orchestrator``. Esse é o objeto "
#~ "principal em termos de funcionalidades "
#~ "da Asgard API, é esse objeto quem"
#~ " define o que a Asgard API "
#~ "consegue fazer, em termos de "
#~ "orquestração."
#~ msgstr ""

#~ msgid "Abaixo está a implementação do objeto ``Orchestrator``"
#~ msgstr ""

#~ msgid "A asgard API suporte alguns Backends:"
#~ msgstr ""

#~ msgid "Marathon"
#~ msgstr ""

#~ msgid ""
#~ "Atualmente a Asgard API já possui "
#~ "implementação de :py:class:`AgentsService "
#~ "<asgard.services.agents.AgentsService>` para `Apache "
#~ "Mesos <http://mesos.apache.org/>`_ e de "
#~ "AppsService par o Mesosphere Marathon."
#~ msgstr ""

#~ msgid ""
#~ "Assim que as interfacec ``AgentsService`` "
#~ "e ``AppsServices`` estiverem mais bem "
#~ "defindas poderemos começar uma implementação"
#~ " para suportar orquestração de containers"
#~ " com Kubernetes."
#~ msgstr ""

#~ msgid "A asgard API suporte alguns orquestradores:"
#~ msgstr ""

#~ msgid "Kubernetes"
#~ msgstr ""

#~ msgid ""
#~ "Assim que as interfacec ``AgentsService`` "
#~ "e ``AppsServices`` estiverem mais bem "
#~ "defindas poderemos começar uma implementação"
#~ " para suportar orquestração de containers"
#~ " com `Kubernetes <https://kubernetes.io/>`_."
#~ msgstr ""

#~ msgid ""
#~ "Os Backends são a implementação concreta"
#~ " com as outras APIs com as "
#~ "quais a Asgard API consegue se "
#~ "comunicar."
#~ msgstr ""

#~ msgid ""
#~ "Na mesma linha dos :ref:`Services "
#~ "<asgard.services>`, esses objetos devem mapear"
#~ " todas as ações que um determinado"
#~ " backend deve ser capaz de realizar."
#~ msgstr ""

#~ msgid ""
#~ "Na mesma linha dos :ref:`Services "
#~ "<asgard.services>`, esses objetos devem mapear"
#~ " todas as ações que um determinado"
#~ " backend deve ser capaz de realizar."
#~ " A comunicação entre o backend e "
#~ "suas respectivas APIs lowlevel deve ser"
#~ " feita atráves de um o mais "
#~ ":ref:`SClients <asgard.clients>`."
#~ msgstr ""

#~ msgid ""
#~ "Os Backends são a cola enre o "
#~ "core do asgard e as outras APIs"
#~ " com as quais a Asgard API "
#~ "consegue se comunicar."
#~ msgstr ""

