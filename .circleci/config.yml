version: 2.1

commands:
  fmt-check:
    description: "Confirma que a formatação do código"
    steps:
      - run: "pipenv run fmt-check"
  lint:
    description: "Confirma que a tipagem do código está correta"
    steps:
      - run: "pipenv run lint"
  isort-check:
    description: "Confirma que a ordem dos imports está correta"
    steps:
      - run: "pipenv run isort-check"
  typehint-cov:
    description: "Upload de coverage de typehint"
    steps:
      - run:
          name: "Typehint coverage report"
          command: |
            mkdir -p .mypy/xml/cov
            pipenv run lint --cobertura-xml-report .mypy/xml/cov
            pipenv run codecov --flags typehint --file .mypy/xml/cov/cobertura.xml
            rm -rf .mypy/
  all-tests:
    description: "Roda todos os testes do projeto (unitários e integração)"
    steps:
      - run: "pipenv run all-tests"

primary: &primary
  image: circleci/python:3.6.8
  environment:
    TEST_DB_URL: "postgresql://postgres@127.0.0.1/asgard"
    TEST_STATS_API_URL: "http://127.0.0.1:9200"
    TEST_SCHEDULED_JOBS_SERVICE_ADDRESS: "http://127.0.0.1:9090"


chronos: &chronos
  image: b2wasgard/chronos:0.1.0
  environment:
    ZK_CLUSTER_IPS: "127.0.0.1:2181"
    HOST: "127.0.0.1" # Para popular a env LIBPROCESS_ADVERTISE_IP.
  command: |
    sh -c "java -jar /chronos/chronos.jar --zk_hosts zk://${ZK_CLUSTER_IPS}/mesos --master zk://${ZK_CLUSTER_IPS}/mesos --http_port 9090"

jobs:
  py368: &template
    docker:
      - <<: *primary
      - image: postgres:9.4
      - image: elasticsearch:5.5-alpine
      - image: b2wasgard/zookeeper:0.0.1
      - <<: *chronos

    steps:
      - checkout
      - run: sudo apt update
      - run: sudo apt-get install postgresql-client
      - run:
          name: Install pip/pipenv
          command: pip install --user -U pip==18.0 pipenv==2018.7.1
      - run:
          name: Install Pipfile.lock
          command: pipenv install --deploy --ignore-pipfile --dev
      - run:
          name: Install asgard-api dev-mode
          command: pipenv run pip install -e .
      - run: psql -c 'create database asgard;' -U postgres -p 5432 -h localhost
      - fmt-check
      - isort-check
      - lint
      - typehint-cov
      - all-tests
      - run:
          when: on_success
          command: pipenv run codecov --flags unittest
  py37x:
      <<: *template
      docker:
        - <<: *primary
          image: circleci/python:3.7
        - image: postgres:9.4
        - image: elasticsearch:5.5-alpine
  py36x:
      <<: *template
      docker:
        - <<: *primary
          image: circleci/python:3.6
        - image: postgres:9.4
        - image: elasticsearch:5.5-alpine
workflows:
  version: 2
  required-checks:
    jobs:
      - py368
      - py36x
  optional-checks:
    jobs:
      - py37x
